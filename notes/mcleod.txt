https://goo.gl/PHKgO7
for course resources

command documentation on go
build info
escape character i.e. /n

sec 5, lec 40
func main is entry point to executable


sec 5, lec 41
use shorthand and var (idomatic ways)

sec 5, lec 48
constants II
variables with no declared type are referred to as "Kind"
they live in ideal space and can receive default types
see go blog post on constants

sec 5, lec 50
youtube todd mcleod CIT 15 Week 03

sec 7, lec 75
When you hit a return in a function, the functions is done.

sec 7, lec 76
must know keyword in go: defer
(lexical element)
good to use when working with open files in funcition. defer close of file.ali

sec 7, lec 77
go is pass by value
everything passed into function is a value
value could be an address

sec 77, lec 77
maps and slices are reference types that are
already reference to an an address
maps are also reference types

sec, lec 78
anonymous self executing functions
allow for functional program
but not encourage in go

sec, lec 79
expressions that valuate to a type bool

sec 7, lec 84
review, funcs
purpose of funcs are to abstract code
break stuff up into packages
primary purpose of funcs is to abstract code
makes code reusuable
use a func you pass in args
params used when declare a function
enclosure can limit scope of function
everything in go is passed by value

how funcs are defined,
unique to go
func, receiver, identifier, params, returns

Sec 8, lec 86
arrays
indentifiable fy and index
does not change in size
look for numbers in bracket, if no numbers then it's a slice
var x [58]string. is an array of string of length 58
not used directly much in go, it has more underlying uses


sec 8, lec 87
an array of bytes
a byte is 8 bits
is there a byte type?
a byte is a a numeric type an is alias for uint8

sec 9, lec 88
read language spec on slices
no number between brackets is how we know it's a slice
looks like array when printed out
a slice is a list
slice vs. slicing vs. index access
a slice can be sliced is mySlice[2:4] last param not inclusive
slices are dynamic
use make command to make slice
slice is reference type
make command can specify capacity
capacity refers to length of underlying array
slice points to underlying array

sec 9, lec 89
must use append to add slice item out of range

sec 9, lec 90
mulit dimen slice
slice inside a slice
two dimension east ti conceptualize

sec 9, lec 91
shorthand slice
slice has header
1. holds address for underlying data structure
2. length
3. capacity
can use make for reference types like slice
if you use var you get a nil slice because nothing gets made
so, can't reference indexes, have to use append
much better to use make so you can reference indexes
takeaway, you have 3 methods to declare a slice, there is shorthand, var, and make
documentation uses make


sec 9, lec 93

Slice is a data structure used to store a list of values of a certain type

Slice of int, string, byte

Slices are built of three elements: pointer to underlying array, lenght, capacity

Slice is a reference type. It references and underlying array.

Why length and capacity are different? Performance.

When length exceeds capacity, and new array is made with double capacity.

A slice points to an array

Value of uninitialized slice is nil

no number in bracket means a slice

cap(a)
to get capacity

make is used to make a slice

index out of range errors

var gives uninitialized slice, must use append


sec 10, lec 94
maps are for key value association
some languages call these dictionary
it's another data structures
slices for lists, maps for key value pairs, and structs for composit variables

maps are unordered
uninitialized values are nil
maps are built on top of hash table

speaking go
sometimes understand more than we can say

slices are ref types, maps and channels are ref types

slice points to array, stores address, length and capacity

maps store a pointer to an addrees where data is stored, so you won't take address of slice or map, it already is one.


sec 10, lec 95

you give key value when you declare a map, i.e. give it types
maps are not ordered
think about how maps are reference types




